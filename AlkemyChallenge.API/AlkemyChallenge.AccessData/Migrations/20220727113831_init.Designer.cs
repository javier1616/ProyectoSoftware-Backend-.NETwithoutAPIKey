// <auto-generated />
using System;
using AlkemyChallenge.AccessData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AlkemyChallenge.AccessData.Migrations
{
    [DbContext(typeof(APIDbContext))]
    [Migration("20220727113831_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Characters", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("History")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("CharacterId");

                    b.ToTable("Characters");

                    b.HasData(
                        new
                        {
                            CharacterId = 1,
                            Age = 37,
                            History = "Un joven que vive en la ciudad de Agrabah",
                            Img = "https://cdn.s7.shopdisney.eu/is/image/ShopDisneyEMEA/33631_aladdin_character_sq_l?$characterImageSizeDesktop1x$&fit=constrain",
                            Name = "Alladin",
                            Weight = 50f
                        },
                        new
                        {
                            CharacterId = 2,
                            Age = 11,
                            History = "Una niña que sueña despierta y ama la lectura",
                            Img = "https://cdn.s7.shopdisney.eu/is/image/ShopDisneyEMEA/33631_alice_character_sq_l?$characterImageSizeDesktop1x$&fit=constrain",
                            Name = "Alicia",
                            Weight = 30f
                        },
                        new
                        {
                            CharacterId = 3,
                            Age = 20,
                            History = "Una niña que tiene el poder de convertir lo que toca en hielo.",
                            Img = "https://cdn.s7.shopdisney.eu/is/image/ShopDisneyEMEA/33631_anna_character_sq_l?$characterImageSizeDesktop1x$&fit=constrain",
                            Name = "Anna",
                            Weight = 45f
                        });
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.CharactersMovies", b =>
                {
                    b.Property<Guid>("CharactersMoviesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CharactersCharacterId")
                        .HasColumnType("int");

                    b.Property<Guid>("MoviesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CharactersMoviesId");

                    b.HasIndex("CharactersCharacterId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CharactersMovies");

                    b.HasData(
                        new
                        {
                            CharactersMoviesId = new Guid("9194dec1-8906-46a2-a684-57cef2d8e657"),
                            CharactersCharacterId = 1,
                            MoviesId = new Guid("002a442c-c613-4b64-a788-185cfc37c0b2")
                        },
                        new
                        {
                            CharactersMoviesId = new Guid("8ff99117-0e0b-4e27-bc1d-057397ec016d"),
                            CharactersCharacterId = 2,
                            MoviesId = new Guid("6042d900-5f13-476a-886c-bd3f3ef9105f")
                        },
                        new
                        {
                            CharactersMoviesId = new Guid("0cb7ea92-c7a0-47eb-ad39-14824fcaae91"),
                            CharactersCharacterId = 3,
                            MoviesId = new Guid("3520916a-6abd-46f3-d6fb-08d9bc5e7c19")
                        });
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Genres", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Img = "img1",
                            Name = "Terror"
                        },
                        new
                        {
                            GenreId = 2,
                            Img = "img1",
                            Name = "Comedy"
                        });
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Movies", b =>
                {
                    b.Property<Guid>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MovieId");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            MovieId = new Guid("002a442c-c613-4b64-a788-185cfc37c0b2"),
                            Date = new DateTime(1992, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 1,
                            Img = "https://i.ebayimg.com/images/g/SQMAAOSwxxdZZHT0/s-l1600.jpg",
                            Score = 5,
                            Title = "Alladin"
                        },
                        new
                        {
                            MovieId = new Guid("6042d900-5f13-476a-886c-bd3f3ef9105f"),
                            Date = new DateTime(1951, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 2,
                            Img = "https://i.etsystatic.com/16952472/r/il/ae1e62/1582515765/il_fullxfull.1582515765_5zfo.jpg",
                            Score = 4,
                            Title = "Alice in the Wonderland"
                        },
                        new
                        {
                            MovieId = new Guid("3520916a-6abd-46f3-d6fb-08d9bc5e7c19"),
                            Date = new DateTime(2013, 11, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GenreId = 2,
                            Img = "https://m.media-amazon.com/images/I/710gvMtoFcL._AC_SY679_.jpg",
                            Score = 2,
                            Title = "Frozen"
                        });
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Users", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UsersId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.CharactersMovies", b =>
                {
                    b.HasOne("AlkemyChallenge.Domain.Entities.Characters", "Character")
                        .WithMany("CharacterMovies")
                        .HasForeignKey("CharactersCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AlkemyChallenge.Domain.Entities.Movies", "Movie")
                        .WithMany("CharacterMovies")
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Movies", b =>
                {
                    b.HasOne("AlkemyChallenge.Domain.Entities.Genres", "Genre")
                        .WithMany("Movies")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Characters", b =>
                {
                    b.Navigation("CharacterMovies");
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Genres", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("AlkemyChallenge.Domain.Entities.Movies", b =>
                {
                    b.Navigation("CharacterMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
